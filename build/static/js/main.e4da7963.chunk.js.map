{"version":3,"sources":["logo.svg","features/counter/todoSlice.js","features/counter/Todo.js","features/counter/counterAPI.js","features/counter/counterSlice.js","App.js","app/store.js","serviceWorker.js","index.js","features/counter/Counter.module.css"],"names":["todoSlice","createSlice","name","initialState","value","id","todo","complete","auth","reducers","add_todo","state","action","event","payload","push","del_todo","del","console","log","todos","filter","DONE_LIST","done","map","check_list","check","all_delete","actions","selectTodo","Todo","useSelector","dispatch","useDispatch","useState","setEvent","React","className","styles","type","onChange","e","target","aria-label","onClick","add","includes","length","max","Math","item","Checkbox","color","inputProps","button","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","reset","incrementByAmount","extraReducers","builder","addCase","pending","fulfilled","App","store","configureStore","reducer","counter","counterReducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e4da7963.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.db36153e.svg\";","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  // value: [],\r\n  value: [\r\n    {\r\n      id: 1,\r\n      todo: \"ごはん\",\r\n      complete: false,\r\n      auth: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      todo: \"おやつ\",\r\n      complete: false,\r\n      auth: false,\r\n    },\r\n    {\r\n      id: 3,\r\n      todo: \"さんぽ\",\r\n      complete: false,\r\n      auth: false,\r\n    },\r\n  ],\r\n};\r\n\r\nexport const todoSlice = createSlice({\r\n  name: 'todo',\r\n  initialState,\r\n  reducers: {\r\n    add_todo: (state, action) => {\r\n      const event = action.payload\r\n      state.value.push({ ...event })\r\n    },\r\n    del_todo: (state, action) => {\r\n      const del = action.payload\r\n      console.log('del.todo', del.todo)//確認用\r\n      console.log('?', del)//確認用\r\n      const todos = del.todos.filter(todos => {\r\n        return todos.todo !== del.todo;\r\n      });\r\n      state.value = todos\r\n      console.log('statevalue', state.value)//確認用\r\n    },\r\n    DONE_LIST: (state, action) => {\r\n      const done = action.payload\r\n      console.log('done', done, done.id)\r\n      const todos = done.todos.map(todos => {\r\n        console.log('todoid', todos.id)//確認用\r\n        if (todos.id === done.id)\r\n          return {\r\n            id: todos.id,\r\n            todo: todos.todo,\r\n            complete: true,\r\n            auth: todos.auth,\r\n          }\r\n        else {\r\n          return {\r\n            id: todos.id,\r\n            todo: todos.todo,\r\n            complete: todos.complete,\r\n            auth: todos.auth,\r\n          }\r\n        }\r\n      })\r\n      state.value = todos\r\n      console.log('statevalue', state.value)//確認用\r\n    },\r\n    check_list: (state, action) => {\r\n      const check = action.payload\r\n      console.log('check', check, check.id)\r\n      const todos = check.todos.map(todos => {\r\n        console.log('todoid', todos.id)\r\n        if (todos.id === check.id)\r\n          return {\r\n            id: todos.id,\r\n            todo: todos.todo,\r\n            complete: todos.complete,\r\n            auth: true,\r\n          }\r\n        else {\r\n          return {\r\n            id: todos.id,\r\n            todo: todos.todo,\r\n            complete: todos.complete,\r\n            auth: todos.auth,\r\n          }\r\n        }\r\n      })\r\n      state.value = todos\r\n      console.log('statevalue', state.value)//確認用\r\n    },\r\n    all_delete: (state) => {\r\n      state.value = [];\r\n      console.log('statevalue', state.value)\r\n    },\r\n  }\r\n});\r\n\r\nexport const { add_todo, del_todo, all_delete, DONE_LIST, check_list } = todoSlice.actions;\r\n\r\nexport const selectTodo = (state) => state.todo.value;\r\n\r\nexport default todoSlice.reducer;","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { selectTodo, add_todo, all_delete, del_todo, DONE_LIST, check_list } from './todoSlice';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport styles from './Counter.module.css';\r\n// import { Button } from 'react-bootstrap'\r\n// import DeleteIcon from '@material-ui/icons/Delete';\r\n// import IconButton from '@material-ui/core/IconButton';\r\nexport function Todo() {\r\n  const todos = useSelector(selectTodo);\r\n  const dispatch = useDispatch();\r\n  const [event, setEvent] = useState('');\r\n  const [complete, setComplete] = useState(false);\r\n  const [del, setDel] = useState('');\r\n  const [auth, setAuth] = React.useState(false);\r\n  const addClick = () => {\r\n    const add =\r\n      todos\r\n        .map(todos => {\r\n          return (\r\n            todos.id\r\n          )\r\n        })\r\n    console.log('includes:', add.includes(todos.length + 1), todos.length + 2)\r\n    const max = Math.max(...add)\r\n    console.log('max', add, max)//確認用\r\n    if ((add.includes(todos.length + 1)) === true)\r\n      dispatch(add_todo({\r\n        id: max + 1, todo: event, complete, auth\r\n      }))\r\n    else\r\n      dispatch(add_todo({\r\n        id: todos.length + 1, todo: event, complete, auth\r\n      }))\r\n  };\r\n  const allDelete = () => {\r\n    dispatch(all_delete());\r\n  };\r\n  const delClick = (todo) => {\r\n    dispatch(del_todo({ todos, todo }))\r\n    // dispatch(del_todo({ todos }))---これは機能しなかった\r\n    console.log(del)\r\n  };\r\n  const done = (id, complete) => {\r\n    dispatch(DONE_LIST({ todos, id }))\r\n  };\r\n  const check = (id) => {\r\n    dispatch(check_list({ todos, id, auth }))\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <span className={styles.value}>Todo List</span>\r\n      <br />\r\n      <input type=\"text\" onChange={e => setEvent(e.target.value)} />\r\n      <button\r\n        aria-label=\"add_todo\"\r\n        onClick={addClick}\r\n      >\r\n        add_todo\r\n        </button>\r\n      <button\r\n        aria-label=\"all_delete\"\r\n        onClick={allDelete}\r\n      >\r\n        all_delete\r\n        </button>\r\n      <ul>\r\n        {\r\n          todos.map(item => {\r\n            return (\r\n              <div key={item.id} >\r\n                <Checkbox\r\n                  onChange={() => check(item.id)}\r\n                  color=\"primary\"\r\n                  inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />\r\n                {/* {item.id}: */}\r\n                {item.todo}\r\n\r\n                {item.auth &&\r\n                  <button\r\n                    className={styles.button}\r\n                    aria-label=\"Decrement value\" onClick={() => delClick(item.todo)} >-</button>\r\n                  // <IconButton aria-label=\"delete\" >\r\n                  //   <DeleteIcon onClick={() => delClick(item.todo)} />\r\n                  // </IconButton>\r\n                }\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n        <br />\r\n        <br />\r\n        ---違う仕組みの実装---\r\n                {\r\n          todos\r\n            .filter((todo) => todo.complete === false)\r\n            .map(item => {\r\n              return (\r\n                <div key={item.id}>{item.id}:{item.todo}\r\n                  <button\r\n                    className={styles.button}\r\n                    aria-label=\"Decrement value\" onClick={() => done(item.id, item.complete)}>-</button>\r\n                </div>\r\n              )\r\n            })\r\n        }\r\n      </ul>\r\n    </div >\r\n  );\r\n}","// A mock function to mimic making an async request for data\r\nexport function fetchCount(amount = 1) {\r\n  return new Promise((resolve) =>\r\n    setTimeout(() => resolve({ data: amount }), 500)\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { fetchCount } from './counterAPI';\r\n\r\nconst initialState = {\r\n  value: 0,\r\n  status: 'idle',\r\n};\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched. Thunks are\r\n// typically used to make async requests.\r\nexport const incrementAsync = createAsyncThunk(\r\n  'counter/fetchCount',\r\n  async (amount) => {\r\n    const response = await fetchCount(amount);\r\n    // The value we return becomes the `fulfilled` action payload\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    reset: (state) => {\r\n      state.value = 0;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(incrementAsync.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(incrementAsync.fulfilled, (state, action) => {\r\n        state.status = 'idle';\r\n        state.value += action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, reset, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state) => state.counter.value;\r\n\r\n// We can also write thunks by hand, which may contain both sync and async logic.\r\n// Here's an example of conditionally dispatching actions based on current state.\r\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  const currentValue = selectCount(getState());\r\n  if (currentValue % 2 === 1) {\r\n    dispatch(incrementByAmount(amount));\r\n  }\r\n};\r\n\r\nexport default counterSlice.reducer;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport { Todo } from './features/counter/Todo';\r\nimport { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        <Todo />\r\n        {/* <Counter /> */}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport todoReducer from '../features/counter/todoSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n    todo: todoReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__3Ks1t\",\"value\":\"Counter_value__2uDVg\",\"button\":\"Counter_button__1k4li\",\"textbox\":\"Counter_textbox__3ewAa\",\"asyncButton\":\"Counter_asyncButton__6_GUD Counter_button__1k4li\"};"],"sourceRoot":""}